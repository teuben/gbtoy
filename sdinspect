#! /usr/bin/env python
#
#   inspect an SDFITS file, plot the first spectrum it sees
#


import os
import sys
import numpy as np
import matplotlib.pyplot as pl
from pyspeckit.spectrum.readers import gbt


# example1 - which doesn't work
def read_gpar(sdfits):
    """ read a 'gpar' file, if present
    """
    gpar = sdfits.replace('.fits','.gpar')
    if os.path.isfile(gpar):
        print("Found parameter file ",gpar)
        lines = open(gpar).readlines()
        for line in lines:
            print("LINE:",line.strip())
            exec(line.strip())
        print(vmin,vmax)

# example2 one type of RFI filter
def filter1(data, rms=None, rmsfactor=5):
    """ if a + and - spike (or - and +) are next to each other,
        replace them with the average of the 2 on either side of that feature
        If the RMS is known, give it.
    """
    print("FILTER:  rfi test")
    n = len(data)
    n2 = n//2
    nrfi = 0
    for i in range(4,n-4,2):
        d0 = 0.5*(data[i] + data[i+3])
        d1 = data[i+1]
        d2 = data[i+2]
        dt1 = abs(d1-d2)
        dt0 = abs(data[i]-data[i+3])
        fac = dt1/dt0 
        if fac > rmsfactor:
            nrfi = nrfi + 1
            if False:
                data[i+1] = d0
                data[i+2] = d0
            print('RFI in channel %d -> %g  ***' % (i+1,fac))
        else:
            print('RFI-clean      %d -> %g' % (i+1,fac))

    print("Found %d" % nrfi)
    return data

def filter2(data, n=5):
    """ hanning smoothing
    """
    print("FILTER:  hanning test")    
    h = np.hanning(n)
    sdata = np.convolve(data,h,'same')
    return sdata


# set up some defaults
vmin = None
vmax = None


sdfits=sys.argv[1]


read_gpar(sdfits)
print("NEW?",vmin,vmax)

session = gbt.GBTSession(sdfits)
print(session)

src = list(session.targets.keys())
if len(src) > 1:
    print("Warning: too many sources:",src)
src = src[0]    
session.load_target(src)

target = session[src]
blocks = list(target.blocks.keys())
if len(blocks) > 1:
    print("Warning: too many blocks",blocks)

nint = 0
sp0 = target.blocks[blocks[0]]
nint = len(sp0)
print("Found %d spectra" % nint)

for i in range(nint):
    sp = sp0[i]
    sp.xarr.convert_to_unit('km/s')
    # sp.data = filter1(sp.data)
    sp.plotter(xmin=vmin,xmax=vmax)
    sp.plotter.label(verbose_label=True)
    pl.show()
